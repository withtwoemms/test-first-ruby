class RPNCalculator
  # TODO: your code goes here!

    attr_accessor :calculator 
    attr_reader :pair, :total, :last_total

    def initialize
        @calculator = {}
        @stack = []
        @total = 0.to_f
        #@pair = [nil,nil]
    end

    def push(num)
        @stack << num
=begin
        if @pair[0] == nil && @pair[1] == nil 
            @pair[0] = num
        elsif @pair.include?(nil) 
            @pair[1] = num
        elsif @pair.include?(nil) == false
            @calculator[@pair] = nil
        end
=end
    end

    def plus
        if @stack.length >= 2
            pair = @stack.last(2)
            sum = pair.first + pair.last
            @total += sum
            @stack.pop(pair.length)
            #@stack.push(sum)
            #if @stack.length == 1
            #    return @total += @stack[0]
            #end
            #@stack.push(sum) 
            return sum
#=begin
        elsif @stack.length == 1
            @total += @stack[0]            
            @stack.pop(1)
            return @total 
#=end
        elsif @stack.length == 0
            @last_total = @total
            raise "calculator is empty"
        end
=begin
        @calculator.each {|pair| 
            calculator.keys[pair].first.method(calculator.values[pair]).(calculator.keys[pair].last)
        }
=end
    end

    def minus
        if @stack.length >= 2 
            pair = @stack.last(2)
            dif = pair.first - pair.last 
            @total += dif
            @stack.pop(pair.length)
            #if @stack.length == 1
            #    return @total -= @stack[0]
            #end
            #@stack.push(dif)
            return @total
#=begin
        elsif @stack.length == 1
            @total -= @stack[0]
            @stack.pop(1)
            return @total
#=end
        elsif @stack.length == 0
            @last_total = @total
            raise "calculator is empty"
        end
    end 

    def times
        if @stack.length >= 2 
            pair = @stack.last(2)
            prod = pair.first * pair.last 
            @total += prod
            @stack.pop(pair.length)
            #if @stack.length == 1
            #    return @total *= @stack[0]
            #end
            #@stack.push(prod)
            return @total
#=begin
        elsif @stack.length == 1
            @total *= @stack[0]
            @stack.pop(1)
            return @total
#=end
        elsif @stack.length == 0
            @last_total = @total
            raise "calculator is empty"
        end
    end 

    def divide
        if @stack.length >= 2 
            pair = @stack.last(2)
            div = pair.first.to_f / pair.last 
            @total += div
            @stack.pop(pair.length)
            #if @stack.length == 1
            #    return @total /= @stack[0]
            #end
            #@stack.push(div)
            return @total
#=begin
        elsif @stack.length == 1
            @total /= @stack[0]
            @stack.pop(1)
            return @total
#=end
        elsif @stack.length == 0
            @last_total = @total
            raise "calculator is empty"
        end
    end

    def tokens(string)
        # chunk solution for non-consecutive operators


        tokens = string.split(" ").map{|char|
            if char.match(/[0-9]+/) != nil # if char is a number..
                #Integer(char)
                char.to_i
            else
                char.to_sym
            end
        }

        

        return tokens
    end

    def evaluate(string)
        @total = 0
        @stack = []
        pending_ops = []
        operators = {
            :+ => Proc.new{plus},   
            :- => Proc.new{minus}, 
            :* => Proc.new{times}, 
            :/ => Proc.new{divide}
        }
    
        return string.to_f unless string.include?(" ")

        string.match(/(-?\d) (-?\d) ([-+*\/])(?!\d)/) # adding "-?" to the regex on digits was important to the last test case: "1 2 3 * + 4 5 - /"
        $3 == "/" ? 
            result = $1.to_f.send($3, $2.to_f) 
            : 
            result = $1.to_i.send($3, $2.to_i)
        string.gsub!([$1,$2,$3].join(" "), result.to_s)

        evaluate(string)

=begin ---BORROWED ATTEMPT---http://stackoverflow.com/questions/23690754/ruby-rpn-calculator-rspec-test
        @stack = []

        opps = {
            :+ => Proc.new {plus}, 
            :- => Proc.new{minus}, 
            :/ => Proc.new{divide}, 
            :* => Proc.new{times} 
            }
    
        tokens(string).chunk{|n| n.is_a?(Integer)}.each do |condition, chunk|
            if condition == true
                chunk.each{|a| push(a) }
            else
                chunk.each {|o| (opps[o].call)}
            end
        end
        @stack[0]
=end
=begin ---SECOND ATTEMPT---
        this = RPNCalculator.new

        tokens = this.tokens(string).reverse
        tokens_len = tokens.length

        match = string.match(/(-?\d+) (-?\d+) ([-+*\/])(?!\d)/).to_s

        i = 0
        while i < tokens_len
            puts @stack 
            if tokens[i].class == Fixnum || tokens[i].class == Float
                @stack.unshift(tokens[i])
                puts "***token #{i} \"#{tokens[i]}\" is a number \t
                [ops]: #{pending_ops}, 
                [stack]: #{@stack}" 
            else
                pending_ops << tokens[i]
                puts "***token #{i} \"#{tokens[i]}\" is an operator \t
                [ops]: #{pending_ops}, 
                [stack]: #{@stack}" 
            end

            if @stack.length == 2
                # operator call
                operators[pending_ops.last].call
                puts "#{@stack[-1]} #{pending_ops.last} #{@stack[-2]} executed"
                puts "total so far is: #{@total}"
                pending_ops.pop
                @stack = []
#                if 

#                end
            elsif i == (tokens_len - 1) && @stack.length == 1 #on last element
                    puts "on the last go, total so far is: #{@total}"
                    #@stack.push(@total)
                    puts "[ops]: #{pending_ops}, [stack]: #{@stack}"
                    operators[pending_ops.pop].call
            end
            i += 1
        end
=end
=begin
        tokens(string).chunk{|n| n.is_a?(Integer)}.each do |condition, chunk|
            if condition == true
                chunk.each{|a| push(a) }
            else
                chunk.each {|o| (operators[o].call)}
            end
        end
=end
=begin
        tokens(string).chunk{|n| 
            n.is_a?(Integer)
        }.each{|e,a| 
            e == true ? a.each{|a| push(a) } : a.each {|o| (operators[o].call) }
        }
        #@stack[0]
=end
=begin ---OLD APPROACH---works for 2 nums and operator
        pending_ops = []
        toks = RPNCalculator.new.tokens(string).reverse
        t_length = toks.length
    #=begin
        i = 0 
        while i < t_length

        p toks, toks.length ###

            if toks.first.is_a?(Numeric)# || toks[i].class == Fixnum #Symbol
                @stack.push(toks.first)
                puts "***token #{i} \"#{toks.first}\" is a number \t
                    [ops]: #{pending_ops}, 
                    [stack]: #{@stack}" 
                toks.shift
    #=begin
                if @stack.length == 2 && i != 0
                    #perform pending operation
                    @stack[-1], @stack[-2] = @stack[-2], @stack[-1]
                    @total = operators[pending_ops.first].call
                    puts "[total]: #{@total}" ###
                    @stack.unshift(@total)
                    if @stack.length == 2 && i == t_length - 1 && t_length > 3
                        total = 0
                        @stack[0], @stack[1] = @stack[1], @stack[0]
                        operators[pending_ops[-1]].call
                        puts "^^^final computation..."
                        return @total
                    end
                    pending_ops.pop
                end
    #=end
            else#if toks[i].class == Fixnum 
                pending_ops.push(toks.first)
                puts "***token #{i} \"#{toks.first}\" is an operator \t
                    [ops]: #{pending_ops}, 
                    [stack]: #{@stack}, 
                    [total]: #{@total}" ###
                toks.shift
            end

            i += 1
        end
        
=end

=begin
        tokens.each_with_index{|token, i|
        p tokens ###
            if [:+,:-,:*,":*",:/].include?(token) == true #token.class == Fixnum || token.class == Float  # if token is a number..
                pending_ops.push(tokens.shift)
                puts "***token #{i} \"#{token}\" is an operator \t[ops]: #{pending_ops}, [stack]: #{@stack}, [total]: #{@total}" ###
            else #![:+,:-,:*,:/].include?(token)
                @stack.push(tokens.shift)
                puts "***token #{i} \"#{token}\" is a number \t[ops]: #{pending_ops}, [stack]: #{@stack}, [total]: #{@total}" ###
=begin
                if @stack.length == 2
                    #perform pending operation
                    @total += operators[pending_ops.last].call
                elsif @stack.length == 1
                    @total += operators[pending_ops.last].call
                elsif @stack.length == 0
                    raise "calculator is empty"
                end
    =end
            end
        }
=end
#        return match #@total #@stack[0] #@total
    end 

    def value
        @total
    end

    puts self.inspect + " has been loaded..."
end
